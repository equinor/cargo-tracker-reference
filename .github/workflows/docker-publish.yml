on:
  push:
    branches:
      - dev
      - test

name: Docker Image CD

jobs:
  publish-client:
      name: Publish client docker image for branch
      runs-on: ubuntu-latest

      steps:
      - uses: actions/checkout@v2

      - name: Get branch name
        id: get_branch
        run: echo ::set-output name=BRANCH::${GITHUB_REF/refs\/heads\//}
      
      - name: Publish client
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: referenceclient
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
          registry: ctregistryprod.azurecr.io
          tags: "${{steps.get_branch.outputs.BRANCH}}"
          workdir: client

  publish-backend:
      name: Publish backend docker image for branch
      runs-on: ubuntu-latest

      steps:
      - uses: actions/checkout@v2

      - name: Get branch name
        id: get_branch
        run: echo ::set-output name=BRANCH::${GITHUB_REF/refs\/heads\//}
      
      - name: Publish backend
        uses: elgohr/Publish-Docker-Github-Action@master
        env:
          PKG_USERNAME: ${{ secrets.PKG_USERNAME }}
          PKG_PASSWORD: ${{ secrets.PKG_PASSWORD }}
        with:
          name: cargotrackerreference
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
          registry: ctregistryprod.azurecr.io
          tags: "${{steps.get_branch.outputs.BRANCH}}"
          workdir: server
          buildargs: PKG_USERNAME,PKG_PASSWORD

  deploy-radix:
    name: Deploy radix for environment
    needs: [publish-client, publish-backend]
    runs-on: ubuntu-latest
    steps:
      - name: Get branch name
        id: get_branch
        run: echo ::set-output name=BRANCH::${GITHUB_REF/refs\/heads\//}
      - name: Deploy API on Radix
        uses: equinor/radix-github-actions@master
        env:
          APP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.RADIX_DEPLOY_SECRET }}
        with:
          args: >
            create job
            deploy
            -a cargo-tracker
            -e ${{ steps.get_branch.outputs.BRANCH }}
            -f
